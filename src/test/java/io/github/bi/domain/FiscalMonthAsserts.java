package io.github.bi.domain;

/*-
 * Money Market Bi - BI Microservice for Money Market Bi deals is part of the Granular Bi System
 * Copyright Â© 2025 Edwin Njeru (mailnjeru@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import static org.assertj.core.api.Assertions.assertThat;

public class FiscalMonthAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFiscalMonthAllPropertiesEquals(FiscalMonth expected, FiscalMonth actual) {
        assertFiscalMonthAutoGeneratedPropertiesEquals(expected, actual);
        assertFiscalMonthAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFiscalMonthAllUpdatablePropertiesEquals(FiscalMonth expected, FiscalMonth actual) {
        assertFiscalMonthUpdatableFieldsEquals(expected, actual);
        assertFiscalMonthUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFiscalMonthAutoGeneratedPropertiesEquals(FiscalMonth expected, FiscalMonth actual) {
        assertThat(actual)
            .as("Verify FiscalMonth auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFiscalMonthUpdatableFieldsEquals(FiscalMonth expected, FiscalMonth actual) {
        assertThat(actual)
            .as("Verify FiscalMonth relevant properties")
            .satisfies(a -> assertThat(a.getMonthNumber()).as("check monthNumber").isEqualTo(expected.getMonthNumber()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getFiscalMonthCode()).as("check fiscalMonthCode").isEqualTo(expected.getFiscalMonthCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFiscalMonthUpdatableRelationshipsEquals(FiscalMonth expected, FiscalMonth actual) {
        assertThat(actual)
            .as("Verify FiscalMonth relationships")
            .satisfies(a -> assertThat(a.getFiscalYear()).as("check fiscalYear").isEqualTo(expected.getFiscalYear()))
            .satisfies(a -> assertThat(a.getPlaceholders()).as("check placeholders").isEqualTo(expected.getPlaceholders()))
            .satisfies(a -> assertThat(a.getFiscalQuarter()).as("check fiscalQuarter").isEqualTo(expected.getFiscalQuarter()));
    }
}
