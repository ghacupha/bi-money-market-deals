package io.github.bi.domain;

/*-
 * Money Market Bi - BI Microservice for Money Market Bi deals is part of the Granular Bi System
 * Copyright Â© 2025 Edwin Njeru (mailnjeru@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import static org.assertj.core.api.Assertions.assertThat;

public class DealerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealerAllPropertiesEquals(Dealer expected, Dealer actual) {
        assertDealerAutoGeneratedPropertiesEquals(expected, actual);
        assertDealerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealerAllUpdatablePropertiesEquals(Dealer expected, Dealer actual) {
        assertDealerUpdatableFieldsEquals(expected, actual);
        assertDealerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealerAutoGeneratedPropertiesEquals(Dealer expected, Dealer actual) {
        assertThat(actual)
            .as("Verify Dealer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealerUpdatableFieldsEquals(Dealer expected, Dealer actual) {
        assertThat(actual)
            .as("Verify Dealer relevant properties")
            .satisfies(a -> assertThat(a.getDealerName()).as("check dealerName").isEqualTo(expected.getDealerName()))
            .satisfies(a -> assertThat(a.getTaxNumber()).as("check taxNumber").isEqualTo(expected.getTaxNumber()))
            .satisfies(a ->
                assertThat(a.getIdentificationDocumentNumber())
                    .as("check identificationDocumentNumber")
                    .isEqualTo(expected.getIdentificationDocumentNumber())
            )
            .satisfies(a -> assertThat(a.getOrganizationName()).as("check organizationName").isEqualTo(expected.getOrganizationName()))
            .satisfies(a -> assertThat(a.getDepartment()).as("check department").isEqualTo(expected.getDepartment()))
            .satisfies(a -> assertThat(a.getPosition()).as("check position").isEqualTo(expected.getPosition()))
            .satisfies(a -> assertThat(a.getPostalAddress()).as("check postalAddress").isEqualTo(expected.getPostalAddress()))
            .satisfies(a -> assertThat(a.getPhysicalAddress()).as("check physicalAddress").isEqualTo(expected.getPhysicalAddress()))
            .satisfies(a -> assertThat(a.getAccountName()).as("check accountName").isEqualTo(expected.getAccountName()))
            .satisfies(a -> assertThat(a.getAccountNumber()).as("check accountNumber").isEqualTo(expected.getAccountNumber()))
            .satisfies(a -> assertThat(a.getBankersName()).as("check bankersName").isEqualTo(expected.getBankersName()))
            .satisfies(a -> assertThat(a.getBankersBranch()).as("check bankersBranch").isEqualTo(expected.getBankersBranch()))
            .satisfies(a -> assertThat(a.getBankersSwiftCode()).as("check bankersSwiftCode").isEqualTo(expected.getBankersSwiftCode()))
            .satisfies(a -> assertThat(a.getFileUploadToken()).as("check fileUploadToken").isEqualTo(expected.getFileUploadToken()))
            .satisfies(a -> assertThat(a.getCompilationToken()).as("check compilationToken").isEqualTo(expected.getCompilationToken()))
            .satisfies(a -> assertThat(a.getRemarks()).as("check remarks").isEqualTo(expected.getRemarks()))
            .satisfies(a -> assertThat(a.getOtherNames()).as("check otherNames").isEqualTo(expected.getOtherNames()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealerUpdatableRelationshipsEquals(Dealer expected, Dealer actual) {
        assertThat(actual)
            .as("Verify Dealer relationships")
            .satisfies(a -> assertThat(a.getDealerGroup()).as("check dealerGroup").isEqualTo(expected.getDealerGroup()))
            .satisfies(a -> assertThat(a.getPlaceholders()).as("check placeholders").isEqualTo(expected.getPlaceholders()));
    }
}
