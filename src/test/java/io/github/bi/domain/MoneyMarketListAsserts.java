package io.github.bi.domain;

/*-
 * Money Market Bi - BI Microservice for Money Market Bi deals is part of the Granular Bi System
 * Copyright Â© 2025 Edwin Njeru (mailnjeru@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import static io.github.bi.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MoneyMarketListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketListAllPropertiesEquals(MoneyMarketList expected, MoneyMarketList actual) {
        assertMoneyMarketListAutoGeneratedPropertiesEquals(expected, actual);
        assertMoneyMarketListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketListAllUpdatablePropertiesEquals(MoneyMarketList expected, MoneyMarketList actual) {
        assertMoneyMarketListUpdatableFieldsEquals(expected, actual);
        assertMoneyMarketListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertMoneyMarketListMapsIdRelationshipPersistedValue(MoneyMarketList entityToPersist, MoneyMarketList persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getReportBatch().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketListAutoGeneratedPropertiesEquals(MoneyMarketList expected, MoneyMarketList actual) {
        assertThat(actual)
            .as("Verify MoneyMarketList auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketListUpdatableFieldsEquals(MoneyMarketList expected, MoneyMarketList actual) {
        assertThat(actual)
            .as("Verify MoneyMarketList relevant properties")
            .satisfies(a -> assertThat(a.getReportDate()).as("check reportDate").isEqualTo(expected.getReportDate()))
            .satisfies(a ->
                assertThat(a.getUploadTimeStamp())
                    .as("check uploadTimeStamp")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUploadTimeStamp())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketListUpdatableRelationshipsEquals(MoneyMarketList expected, MoneyMarketList actual) {
        assertThat(actual)
            .as("Verify MoneyMarketList relationships")
            .satisfies(a -> assertThat(a.getPlaceholders()).as("check placeholders").isEqualTo(expected.getPlaceholders()))
            .satisfies(a -> assertThat(a.getUploadedBy()).as("check uploadedBy").isEqualTo(expected.getUploadedBy()));
    }
}
