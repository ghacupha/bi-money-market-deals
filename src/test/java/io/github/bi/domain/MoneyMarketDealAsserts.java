package io.github.bi.domain;

/*-
 * Money Market Bi - BI Microservice for Money Market Bi deals is part of the Granular Bi System
 * Copyright Â© 2025 Edwin Njeru (mailnjeru@gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import static io.github.bi.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MoneyMarketDealAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketDealAllPropertiesEquals(MoneyMarketDeal expected, MoneyMarketDeal actual) {
        assertMoneyMarketDealAutoGeneratedPropertiesEquals(expected, actual);
        assertMoneyMarketDealAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketDealAllUpdatablePropertiesEquals(MoneyMarketDeal expected, MoneyMarketDeal actual) {
        assertMoneyMarketDealUpdatableFieldsEquals(expected, actual);
        assertMoneyMarketDealUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketDealAutoGeneratedPropertiesEquals(MoneyMarketDeal expected, MoneyMarketDeal actual) {
        assertThat(actual)
            .as("Verify MoneyMarketDeal auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketDealUpdatableFieldsEquals(MoneyMarketDeal expected, MoneyMarketDeal actual) {
        assertThat(actual)
            .as("Verify MoneyMarketDeal relevant properties")
            .satisfies(a -> assertThat(a.getDealNumber()).as("check dealNumber").isEqualTo(expected.getDealNumber()))
            .satisfies(a -> assertThat(a.getTradingBook()).as("check tradingBook").isEqualTo(expected.getTradingBook()))
            .satisfies(a -> assertThat(a.getCounterPartyName()).as("check counterPartyName").isEqualTo(expected.getCounterPartyName()))
            .satisfies(a ->
                assertThat(a.getFinalInterestAccrualDate())
                    .as("check finalInterestAccrualDate")
                    .isEqualTo(expected.getFinalInterestAccrualDate())
            )
            .satisfies(a ->
                assertThat(a.getCounterPartySideType()).as("check counterPartySideType").isEqualTo(expected.getCounterPartySideType())
            )
            .satisfies(a ->
                assertThat(a.getDateOfCollectionStatement())
                    .as("check dateOfCollectionStatement")
                    .isEqualTo(expected.getDateOfCollectionStatement())
            )
            .satisfies(a -> assertThat(a.getCurrencyCode()).as("check currencyCode").isEqualTo(expected.getCurrencyCode()))
            .satisfies(a ->
                assertThat(a.getPrincipalAmount())
                    .as("check principalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPrincipalAmount())
            )
            .satisfies(a ->
                assertThat(a.getInterestRate())
                    .as("check interestRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getInterestRate())
            )
            .satisfies(a ->
                assertThat(a.getInterestAccruedAmount())
                    .as("check interestAccruedAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getInterestAccruedAmount())
            )
            .satisfies(a ->
                assertThat(a.getTotalInterestAtMaturity())
                    .as("check totalInterestAtMaturity")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalInterestAtMaturity())
            )
            .satisfies(a ->
                assertThat(a.getCounterpartyNationality())
                    .as("check counterpartyNationality")
                    .isEqualTo(expected.getCounterpartyNationality())
            )
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getTreasuryLedger()).as("check treasuryLedger").isEqualTo(expected.getTreasuryLedger()))
            .satisfies(a -> assertThat(a.getDealSubtype()).as("check dealSubtype").isEqualTo(expected.getDealSubtype()))
            .satisfies(a ->
                assertThat(a.getShillingEquivalentPrincipal())
                    .as("check shillingEquivalentPrincipal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getShillingEquivalentPrincipal())
            )
            .satisfies(a ->
                assertThat(a.getShillingEquivalentInterestAccrued())
                    .as("check shillingEquivalentInterestAccrued")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getShillingEquivalentInterestAccrued())
            )
            .satisfies(a ->
                assertThat(a.getShillingEquivalentPVFull())
                    .as("check shillingEquivalentPVFull")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getShillingEquivalentPVFull())
            )
            .satisfies(a ->
                assertThat(a.getCounterpartyDomicile()).as("check counterpartyDomicile").isEqualTo(expected.getCounterpartyDomicile())
            )
            .satisfies(a -> assertThat(a.getSettlementDate()).as("check settlementDate").isEqualTo(expected.getSettlementDate()))
            .satisfies(a ->
                assertThat(a.getTransactionCollateral()).as("check transactionCollateral").isEqualTo(expected.getTransactionCollateral())
            )
            .satisfies(a -> assertThat(a.getInstitutionType()).as("check institutionType").isEqualTo(expected.getInstitutionType()))
            .satisfies(a -> assertThat(a.getMaturityDate()).as("check maturityDate").isEqualTo(expected.getMaturityDate()))
            .satisfies(a ->
                assertThat(a.getInstitutionReportName()).as("check institutionReportName").isEqualTo(expected.getInstitutionReportName())
            )
            .satisfies(a -> assertThat(a.getTransactionType()).as("check transactionType").isEqualTo(expected.getTransactionType()))
            .satisfies(a -> assertThat(a.getReportDate()).as("check reportDate").isEqualTo(expected.getReportDate()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyMarketDealUpdatableRelationshipsEquals(MoneyMarketDeal expected, MoneyMarketDeal actual) {
        assertThat(actual)
            .as("Verify MoneyMarketDeal relationships")
            .satisfies(a -> assertThat(a.getMoneyMarketList()).as("check moneyMarketList").isEqualTo(expected.getMoneyMarketList()));
    }
}
